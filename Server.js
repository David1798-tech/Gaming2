// server.js - Backend API Server for Gaming Website 
const express = require('express'); 
const cors = require('cors');
const path = require('path'); 
const fs = require('fs').promises;
const app = express();
const PORT = process.env.PORT || 3001; 
// Middleware 
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public'))); 
// In-memory storage (replace with database in production) 
let gameData = { 
    players: [], 
    leaderboard: [ 
           { name: 'Player1', score: 15420, game: 'snake' },
           { name: 'GameMaster', score: 12880, game: 'shooter' },
           { name: 'ProGamer', score: 11340, game: 'snake' },
           { name: 'SnakeKing', score: 9750, game: 'snake' }, 
           { name: 'Sharpshooter', score: 8290, game: 'shooter' } ],
    gameStats: {
         totalPlayers: 1250,
         gamesPlayed: 5430,
        topScore: 15420 } };
// API Routes // Get leaderboard 
app.get('/api/leaderboard', (req, res) => { 
  try {
    const sortedLeaderboard = gameData.leaderboard 
      .sort((a, b) => b.score - a.score) 
      .slice(0, 10); 
    res.json(
      { success: true,
      data: sortedLeaderboard, 
      timestamp: new Date().toISOString() }); 
  } catchres.status(500).json({ success: false, error: 'Failed to fetch leaderboard' }); } }); // Submit score app.post('/api/score', (req, res) => { try { const { playerName, score, game } = req.body; // Validate input if (!playerName || typeof score !== 'number' || !game) { return res.status(400).json({ success: false, error: 'Invalid input data' }); } // Add to leaderboard const newEntry = { name: playerName.substring(0, 20), // Limit name length score: Math.max(0, Math.floor(score)), // Ensure positive integer game: game, timestamp: new Date().toISOString() }; gameData.leaderboard.push(newEntry); // Keep only top 100 scores gameData.leaderboard = gameData.leaderboard .sort((a, b) => b.score - a.score) .slice(0, 100); // Update stats gameData.gameStats.gamesPlayed++; if (score > gameData.gameStats.topScore) { gameData.gameStats.topScore = score; } res.json({ success: true, message: 'Score submitted successfully', rank: gameData.leaderboard.findIndex(entry => entry.name === newEntry.name && entry.score === newEntry.score ) + 1 }); } catch (error) { res.status(500).json({ success: false, error: 'Failed to submit score' }); } }); // Get game statistics app.get('/api/stats', (req, res) => { try { res.json({ success: true, data: { ...gameData.gameStats, totalScoresSubmitted: gameData.leaderboard.length, averageScore: gameData.leaderboard.length > 0 ? Math.floor(gameData.leaderboard.reduce((sum, entry) => sum + entry.score, 0) / gameData.leaderboard.length) : 0 } }); } catch (error) { res.status(500).json({ success: false, error: 'Failed to fetch statistics' }); } }); /// server.js - Backend API Server for Gaming Website const express = require('express'); const cors = require('cors'); const path = require('path'); const fs = require('fs').promises; const app = express(); const PORT = process.env.PORT || 3001; // Middleware app.use(cors()); app.use(express.json()); app.use(express.static(path.join(__dirname, 'public'))); // In-memory storage (replace with database in production) let gameData = { players: [], leaderboard: [ { name: 'Player1', score: 15420, game: 'snake' }, { name: 'GameMaster', score: 12880, game: 'shooter' }, { name: 'ProGamer', score: 11340, game: 'snake' }, { name: 'SnakeKing', score: 9750, game: 'snake' }, { name: 'Sharpshooter', score: 8290, game: 'shooter' } ], gameStats: { totalPlayers: 1250, gamesPlayed: 5430, topScore: 15420 } }; // API Routes // Get leaderboard app.get('/api/leaderboard', (req, res) => { try { const sortedLeaderboard = gameData.leaderboard .sort((a, b) => b.score - a.score) .slice(0, 10); res.json({ success: true, data: sortedLeaderboard, timestamp: new Date().toISOString() }); } catch (error) { res.status(500).json({ success: false, error: 'Failed to fetch leaderboard' }); } }); // Submit score app.post('/api/score', (req, res) => { try { const { playerName, score, game } = req.body; // Validate input if (!playerName || typeof score !== 'number' || !game) { return res.status(400).json({ success: false, error: 'Invalid input data' }); } // Add to leaderboard const newEntry = { name: playerName.substring(0, // server.js - Backend API Server for Gaming Website const express = require('express'); const cors = require('cors'); const path = require('path'); const fs = require('fs').promises; const app = express(); const PORT = process.env.PORT || 3001; // Middleware app.use(cors()); app.use(express.json()); app.use(express.static(path.join(__dirname, 'public'))); // In-memory storage (replace with database in production) let gameData = { players: [], leaderboard: [ { name: 'Player1', score: 15420, game: 'snake' }, { name: 'GameMaster', score: 12880, game: 'shooter' }, { name: 'ProGamer', score: 11340, game: 'snake' }, { name: 'SnakeKing', score: 9750, game: 'snake' }, { name: 'Sharpshooter', score: 8290, game: 'shooter' } ], gameStats: { totalPlayers: 1250, gamesPlayed: 5430, topScore: 15420 } }; // API Routes // Get leaderboard app.get('/api/leaderboard', (req, res) => { try { const sortedLeaderboard = gameData.leaderboard .sort((a, b) => b.score - a.score) .slice(0, 10); res.json({ success: true, data: sortedLeaderboard, timestamp: new Date().toISOString() }); } catch (error) { res.status(500).json({ success: false, error: 'Failed to fetch leaderboard' }); } }); // Submit score app.post('/api/score', (req, res) => { try { const { playerName, score, game } = req.body; // Validate input if (!playerName || typeof score !== 'number' || !game) { return res.status(400).json({ success: false, error: 'Invalid input data' }); } // Add to leaderboard const newEntry = { name: playerName.substring(0, // server.js - Backend API Server for Gaming Website const express = require('express'); const cors = require('cors'); const path = require('path'); const fs = require('fs').promises; const app = express(); const PORT = process.env.PORT || 3001; // Middleware app.use(cors()); app.use(express.json()); app.use(express.static(path.join(__dirname, 'public'))); // In-memory storage (replace with database in production) let gameData = { players: [], leaderboard: [ { name: 'Player1', score: 15420, game: 'snake' }, { name: 'GameMaster', score: 12880, game: 'shooter' }, { name: 'ProGamer', score: 11340, game: 'snake' }, { name: 'SnakeKing', score: 9750, game: 'snake' }, { name: 'Sharpshooter', score: 8290, game: 'shooter' } ], gameStats: { totalPlayers: 1250, gamesPlayed: 5430, topScore: 15420 } }; // API Routes // Get leaderboard app.get('/api/leaderboard', (req, res) => { try { const sortedLeaderboard = gameData.leaderboard .sort((a, b) => b.score - a.score) .slice(0, 10); res.json({ success: true, data: sortedLeaderboard, timestamp: new Date().toISOString() }); } catch (error) { res.status(500).json({ success: false, error: 'Failed to fetch leaderboard' }); } }); // Submit score app.post('/api/score', (req, res) => { try { const { playerName, score, game } = req.body; // Validate input if (!playerName || typeof score !== 'number' || !game) { return res.status(400).json({ success: false, error: 'Invalid input data' }); } // Add to leaderboard const newEntry = { name: playerName.substring(0, // server.js - Backend API Server for Gaming Website const express = require('express'); const cors = require('cors'); const path = require('path'); const fs = require('fs').promises; const app = express(); const PORT = process.env.PORT || 3001; // Middleware app.use(cors()); app.use(express.json()); app.use(express.static(path.join(__dirname, 'public'))); // In-memory storage (replace with database in production) let gameData = { players: [], leaderboard: [ { name: 'Player1', score: 15420, game: 'snake' }, { name: 'GameMaster', score: 12880, game: 'shooter' }, { name: 'ProGamer', score: 11340, game: 'snake' }, { name: 'SnakeKing', score: 9750, game: 'snake' }, { name: 'Sharpshooter', score: 8290, game: 'shooter' } ], gameStats: { totalPlayers: 1250, gamesPlayed: 5430, topScore: 15420 } }; // API Routes // Get leaderboard app.get('/api/leaderboard', (req, res) => { try { const sortedLeaderboard = gameData.leaderboard .sort((a, b) => b.score - a.score) .slice(0, 10); res.json({ success: true, data: sortedLeaderboard, timestamp: new Date().toISOString() }); } catch (error) { res.status(500).json({ success: false, error: 'Failed to fetch leaderboard' }); } }); // Submit score app.post('/api/score', (req, res) => { try { const { playerName, score, game } = req.body; // Validate input if (!playerName || typeof score !== 'number' || !game) { return res.status(400).json({ success: false, error: 'Invalid input data' }); } // Add to leaderboard const newEntry = { name: playerName.substring(0, // server.js - Backend API Server for Gaming Website const express = require('express'); const cors = require('cors'); const path = require('path'); const fs = require('fs').promises; const app = express(); const PORT = process.env.PORT || 3001; // Middleware app.use(cors()); app.use(express.json()); app.use(express.static(path.join(__dirname, 'public'))); // In-memory storage (replace with database in production) let gameData = { players: [], leaderboard: [ { name: 'Player1', score: 15420, game: 'snake' }, { name: 'GameMaster', score: 12880, game: 'shooter' }, { name: 'ProGamer', score: 11340, game: 'snake' }, { name: 'SnakeKing', score: 9750, game: 'snake' }, { name: 'Sharpshooter', score: 8290, game: 'shooter' } ], gameStats: { totalPlayers: 1250, gamesPlayed: 5430, topScore: 15420 } }; // API Routes // Get leaderboard app.get('/api/leaderboard', (req, res) => { try { const sortedLeaderboard = gameData.leaderboard .sort((a, b) => b.score - a.score) .slice(0, 10); res.json({ success: true, data: sortedLeaderboard, timestamp: new Date().toISOString() }); } catch (error) { res.status(500).json({ success: false, error: 'Failed to fetch leaderboard' }); } }); // Submit score app.post('/api/score', (req, res) => { try { const { playerName, score, game } = req.body; // Validate input if (!playerName || typeof score !== 'number' || !game) { return res.status(400).json({ success: false, error: 'Invalid input data' }); }  Get player profile app.get('/api/player/:name', 
